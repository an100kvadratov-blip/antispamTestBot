import os
import re
import logging
from logging.handlers import RotatingFileHandler
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes
from telegram.error import BadRequest, RetryAfter, Conflict
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = RotatingFileHandler("bot.log", maxBytes=5 * 1024 * 1024, backupCount=2)
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(file_handler)

# –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)

logging.getLogger("httpx").setLevel(logging.WARNING)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
OWNER_ID = int(os.environ.get("OWNER_ID")) if os.environ.get("OWNER_ID") else None
PROTECTED_CHANNEL_ID = int(os.environ.get("PROTECTED_CHANNEL_ID")) if os.environ.get("PROTECTED_CHANNEL_ID") else None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –æ–±—â–∞—è –¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤
if not TOKEN or OWNER_ID is None or PROTECTED_CHANNEL_ID is None:
    logger.error("üö´ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: TOKEN, OWNER_ID –∏–ª–∏ PROTECTED_CHANNEL_ID")
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TOKEN, OWNER_ID –∏–ª–∏ PROTECTED_CHANNEL_ID")

# --- –£–õ–£–ß–®–ï–ù–ù–´–ô –°–ü–ò–°–û–ö –ü–ê–¢–¢–ï–†–ù–û–í –î–õ–Ø –°–ü–ê–ú–ê ---
SPAM_PATTERNS = [
    # 1. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    re.compile(r"https?://|www\.|\.(com|ru|org|net|info|bot|me)/?", re.IGNORECASE),
    re.compile(r"t\.me/", re.IGNORECASE),
    re.compile(r"\b(t\.me|tlgrm\.me|telegram\.me)\b", re.IGNORECASE),
    re.compile(r"@[a-zA-Z0-9_]{5,}", re.IGNORECASE),
    re.compile(r"\+?\d{10,}", re.IGNORECASE),
    re.compile(r"(whatsapp|–≤–∞–π–±–µ—Ä|viber)", re.IGNORECASE),
    re.compile(r"–∫–æ–Ω—Ç–∞–∫—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω|–ª–∏—á–∫–∞|–ª—Å|–ª–∏—á–Ω—ã–µ\s+—Å–æ–æ–±—â–µ–Ω–∏—è|pm|dm", re.IGNORECASE),
    
    # 2. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    re.compile(r"–∑–∞—Ä–∞–±–æ—Ç(–æ–∫|–∞—Ç—å)|–¥–æ—Ö–æ–¥|–ø—Ä–∏–±—ã–ª—å", re.IGNORECASE),
    re.compile(r"—Ä–∞–±–æ—Ç(–∞|–∞—Ç—å)|–≤–∞–∫–∞–Ω—Å–∏(—è|–∏)|—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–ø–µ—Ä—Å–æ–Ω–∞–ª|—Ç—Ä–µ–±—É–µ—Ç—Å—è", re.IGNORECASE),
    re.compile(r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫|–Ω–∞\s+–¥–æ–º—É|—É–¥–∞–ª–µ–Ω–Ω", re.IGNORECASE),
    re.compile(r"–±–µ–∑\s+–≤–ª–æ–∂–µ–Ω–∏–π|–±–µ–∑\s+–æ–ø—ã—Ç–∞", re.IGNORECASE),
    re.compile(r"–ø–ª–∞—á—É|–æ–ø–ª–∞—Ç–∞|–≤—ã–ø–ª–∞—Ç—ã|–¥–µ–Ω—å–≥–∏", re.IGNORECASE),

    # 3. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
    re.compile(r"6200", re.IGNORECASE), # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É–º–º—ã
    re.compile(r"\b\d{3,}\s*(—Ä|—Ä—É–±|—Ä—É–±–ª–µ–π)?", re.IGNORECASE), # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–±—â–∏—Ö —Å—É–º–º
    re.compile(r"\b\d{3,}\s*\$|\b\d{3,}\s*‚Ç¨", re.IGNORECASE),

    # 4. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±—â–∏—Ö –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
    re.compile(r"–ø–∏—à–∏|–Ω–∞–ø–∏—à–∏|–æ–±—Ä–∞—â–∞–π—Å—è|—Å–≤—è–∂–∏—Å—å|–æ–±—Å—É–¥–∏–º\s+–¥–µ—Ç–∞–ª–∏|–ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", re.IGNORECASE),
    re.compile(r"–Ω—É–∂–Ω—ã\s+–ª—é–¥–∏|–∏—â–µ–º", re.IGNORECASE),
    re.compile(r"–±—ã—Å—Ç—Ä[–æ—ã]{1,2}|–ª–µ–≥–∫[–æ–∏]{1,2}", re.IGNORECASE),
    re.compile(r"3-4\s*—á–∞—Å–∏–∫–∞|–ø–∞—Ä—É\s+—á–∞—Å–æ–≤", re.IGNORECASE), # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    re.compile(r"\b–Ω–µ\s+–æ–Ω–ª–∞–π–Ω\b|\b–≤–∂–∏–≤—É—é\b|\b–ø—Ä–∏\s+–≤—Å—Ç—Ä–µ—á–µ\b", re.IGNORECASE), # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ—Ñ–ª–∞–π–Ω –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
]


async def check_bot_permissions(app):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."""
    try:
        bot = app.bot
        member = await bot.get_chat_member(PROTECTED_CHANNEL_ID, bot.id)
        if not member.can_delete_messages:
            logger.error("üö´ –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ %s!", PROTECTED_CHANNEL_ID)
            return False
        logger.info("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return True
    except Exception as e:
        logger.error("üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: %s", e)
        return False


async def check_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º–∞ –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö."""
    message = update.effective_message
    if not message:
        return

    if message.from_user.id == OWNER_ID:
        return

    if message.chat_id != PROTECTED_CHANNEL_ID:
        return

    text = message.text or ""

    if "t.me" in text.lower():
        logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (t.me –≤ —Ç–µ–∫—Å—Ç–µ) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", message.from_user.id)
        await delete_message(message)
        return

    if message.entities:
        for entity in message.entities:
            if entity.type in ["url", "text_link"]:
                logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (—Å—Å—ã–ª–∫–∞) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", message.from_user.id)
                await delete_message(message)
                return

    if not text and not message.entities:
        return
    for pattern in SPAM_PATTERNS:
        if pattern.search(text):
            logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (%s) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", pattern.pattern, message.from_user.id)
            await delete_message(message)
            return


async def delete_message(message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        await message.delete()
        logger.info("üóëÔ∏è –£–î–ê–õ–ï–ù–û —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s", message.from_user.id)
    except BadRequest as e:
        logger.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)


def run_polling():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞."""
    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–ø—Ä–æ—Å–∞ (polling)...")
    logger.info("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìç –¢–æ–∫–µ–Ω: %s...", TOKEN[:10])
    logger.info("üëë ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: [%s]", OWNER_ID)
    logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: %s", PROTECTED_CHANNEL_ID)
    logger.info("üìä –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")

    application.run_polling(poll_interval=1.0)


def run_webhook():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞."""
    URL = os.environ.get("RAILWAY_STATIC_URL")
    PORT = int(os.environ.get("PORT", 5000))

    if not URL:
        logger.error("üö´ RAILWAY_STATIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        raise ValueError("RAILWAY_STATIC_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    application = Application.builder().token(TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))

    async def post_init(app: Application) -> None:
        await app.bot.set_webhook(url=f"https://{URL}/")
        permissions_ok = await check_bot_permissions(app)
        if not permissions_ok:
            logger.error("üõë –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤")
            raise RuntimeError("–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤.")

    application.post_init = post_init
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–µ–±—Ö—É–∫–∞ (webhook) –Ω–∞ –ø–æ—Ä—Ç—É {PORT}...")
    logger.info("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìç –¢–æ–∫–µ–Ω: %s...", TOKEN[:10])
    logger.info("üëë ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: [%s]", OWNER_ID)
    logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: %s", PROTECTED_CHANNEL_ID)
    logger.info("üìä –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="",
        webhook_url=f"https://{URL}",
    )


if __name__ == "__main__":
    if os.environ.get("RAILWAY_STATIC_URL"):
        run_webhook()
    else:
        run_polling()
