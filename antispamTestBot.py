import os
import re
import logging
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è `httpx`
logging.getLogger("httpx").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
OWNER_ID = int(os.environ.get("OWNER_ID"))
PROTECTED_CHANNEL_ID = int(os.environ.get("PROTECTED_CHANNEL_ID"))
URL = os.environ.get("URL")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å–ø–∞–º–∞
SPAM_PATTERNS = [
    re.compile(r"https?://", re.IGNORECASE),
    re.compile(r"www\.", re.IGNORECASE),
    re.compile(r"\.(com|ru|org|net|info|bot|me)/?", re.IGNORECASE),
    re.compile(r"t\.me/", re.IGNORECASE),
    re.compile(r"@[a-zA-Z0-9_]{5,}", re.IGNORECASE),
    re.compile(r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫", re.IGNORECASE),
    re.compile(r"–∑–∞—Ä–∞–±–æ—Ç–æ–∫", re.IGNORECASE),
    re.compile(r"–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å", re.IGNORECASE),
    re.compile(r"–≤–∞–∫–∞–Ω—Å–∏", re.IGNORECASE),
    re.compile(r"—Ä–∞–±–æ—Ç[–∞—ã—É]", re.IGNORECASE),
    re.compile(r"—Ä–∞–±–æ—Ç–∞—Ç—å", re.IGNORECASE),
    re.compile(r"–ø–∏—à–∏\s*(–≤?\s*(–ª—Å|–ª–∏—á–∫—É|–ª–∏—á–Ω—ã–µ|–ø–º|pm|dm))", re.IGNORECASE),
    re.compile(r"–æ–±—Ä–∞—â–∞–π—Å—è", re.IGNORECASE),
    re.compile(r"–Ω–∞–ø–∏—à–∏", re.IGNORECASE),
    re.compile(r"—Å–≤—è–∂–∏—Å—å", re.IGNORECASE),
    re.compile(r"–∏–Ω–≤–µ—Å—Ç", re.IGNORECASE),
    re.compile(r"–±–∏–∑–Ω–µ—Å", re.IGNORECASE),
    re.compile(r"–ø–∞—Ä—Ç–Ω–µ—Ä", re.IGNORECASE),
    re.compile(r"—Ñ—Ä–∞–Ω—à–∏–∑", re.IGNORECASE),
    re.compile(r"–∫—Ä–∏–ø—Ç", re.IGNORECASE),
    re.compile(r"–±–∏—Ç–∫–æ–∏–Ω", re.IGNORECASE),
    re.compile(r"–±—ã—Å—Ç—Ä—ã[–µ–π]? –¥–µ–Ω—å–≥–∏", re.IGNORECASE),
    re.compile(r"–ª–µ–≥–∫[–∞–æ–∏]? –∑–∞—Ä–∞–±–æ—Ç–æ–∫", re.IGNORECASE),
    re.compile(r"–Ω–∞ –¥–æ–º—É", re.IGNORECASE),
    re.compile(r"—É–¥–∞–ª–µ–Ω–Ω", re.IGNORECASE),
    re.compile(r"—É–¥–∞–ª—ë–Ω–Ω", re.IGNORECASE),
    re.compile(r"–Ω–∞–±–æ—Ä.*(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–ø–µ—Ä—Å–æ–Ω–∞–ª|—Ä–∞–±–æ—Ç–Ω–∏–∫)", re.IGNORECASE),
    re.compile(r"—Ç—Ä–µ–±—É—é—Ç—Å—è", re.IGNORECASE),
    re.compile(r"—Ç—Ä–µ–±—É–µ—Ç—Å—è", re.IGNORECASE),
    re.compile(r"\+?\d{10,}", re.IGNORECASE),
    re.compile(r"@\w{5,}", re.IGNORECASE),
    re.compile(r"–∫–æ–Ω—Ç–∞–∫—Ç", re.IGNORECASE),
    re.compile(r"—Ç–µ–ª–µ—Ñ–æ–Ω", re.IGNORECASE),
    re.compile(r"whatsapp", re.IGNORECASE),
    re.compile(r"–≤–∞–π–±–µ—Ä", re.IGNORECASE),
    re.compile(r"–±–µ—Å–ø–ª–∞—Ç–Ω–æ", re.IGNORECASE),
    re.compile(r"–±–æ–Ω—É—Å", re.IGNORECASE),
    re.compile(r"–∞–∫—Ü–∏", re.IGNORECASE),
    re.compile(r"—Å–∫–∏–¥–∫", re.IGNORECASE),
    re.compile(r"–≤—ã–≥–æ–¥–Ω", re.IGNORECASE),
    re.compile(r"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω", re.IGNORECASE),
    re.compile(r"–º–ª–º", re.IGNORECASE),
    re.compile(r"—Å–µ—Ç–µ–≤–æ–π", re.IGNORECASE),
    re.compile(r"–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", re.IGNORECASE),
    re.compile(r"8000", re.IGNORECASE),
    re.compile(r"8\s*000", re.IGNORECASE),
    re.compile(r"8–∫", re.IGNORECASE),
    re.compile(r"8\s*[–∫k]", re.IGNORECASE),
    re.compile(r"–¥–µ–Ω—å–≥–∏", re.IGNORECASE),
    re.compile(r"–≤—ã–ø–ª–∞—Ç", re.IGNORECASE),
    re.compile(r"–ø–æ–ª—É—á–∞–µ—à—å", re.IGNORECASE),
    re.compile(r"–∑–∞\s*4\s*—á–∞—Å", re.IGNORECASE),
    re.compile(r"–Ω–µ—Å–∫–æ–ª—å–∫–æ\s*–¥–Ω–µ–π", re.IGNORECASE),
    re.compile(r"–Ω—É–∂–Ω—ã\s+–ª—é–¥–∏", re.IGNORECASE),
    re.compile(r"—Ç—Ä–µ–±—É—é—Ç—Å—è", re.IGNORECASE),
    re.compile(r"–∏—â–µ–º", re.IGNORECASE),
    re.compile(r"–¥–ª—è\s+—Ä–∞–±–æ—Ç—ã", re.IGNORECASE),
    re.compile(r"—É–¥–∞–ª–µ–Ωn", re.IGNORECASE),
    re.compile(r"–ø–æ–¥—Ä–∞–±–æ—Ç–∫", re.IGNORECASE),
    re.compile(r"–±–µ–∑\s+–≤–ª–æ–∂–µ–Ω–∏–π", re.IGNORECASE),
    re.compile(r"–±–µ–∑\s+–æ–ø—ã—Ç–∞", re.IGNORECASE),
    re.compile(r"–≤\s+—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–≤—Ä–µ–º—è", re.IGNORECASE),
]

async def check_message(update: Update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º–∞ –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏."""
    message = update.effective_message
    if not message:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if message.from_user.id == OWNER_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    if message.chat_id != PROTECTED_CHANNEL_ID:
        logger.info(
            "üìç –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: %s", message.chat_id
        )
        return

    text = message.text or ""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    if message.entities:
        for entity in message.entities:
            if entity.type in ["url", "text_link"]:
                if "t.me" in entity.url:
                    logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (t.me —Å—Å—ã–ª–∫–∞) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", message.from_user.id)
                    await delete_message(message)
                    return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for pattern in SPAM_PATTERNS:
        if pattern.search(text):
            logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (%s) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", pattern.pattern, message.from_user.id)
            await delete_message(message)
            return

async def delete_message(message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        await message.delete()
        logger.info("üóëÔ∏è –£–î–ê–õ–ï–ù–û —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s", message.from_user.id)
    except Exception as e:
        logger.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Application."""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))
    return app

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìç –¢–æ–∫–µ–Ω: %s...", TOKEN[:10])
    logger.info("üëë ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: [%s]", OWNER_ID)
    logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: %s", PROTECTED_CHANNEL_ID)
    logger.info("üìä –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")

    if URL:
        app = application()
        app.run_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", "5000")),
            url_path=TOKEN,
            webhook_url=URL + TOKEN
        )
    else:
        app = application()
        app.run_polling(poll_interval=1.0)

if __name__ == "__main__":
    main()