import os
import re
import logging
from logging.handlers import RotatingFileHandler
from telegram import Update
from telegram.ext import Application, MessageHandler, filters
from telegram.error import BadRequest
from dotenv import load_dotenv
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ñ–∞–π–ª + –∫–æ–Ω—Å–æ–ª—å)
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –õ–æ–≥–∏ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
file_handler = RotatingFileHandler("bot.log", maxBytes=5*1024*1024, backupCount=2)
file_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(file_handler)

# –õ–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª—å
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s"))
logger.addHandler(console_handler)

logging.getLogger("httpx").setLevel(logging.WARNING)

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.environ.get("TOKEN")
OWNER_ID = int(os.environ.get("OWNER_ID"))
PROTECTED_CHANNEL_ID = int(os.environ.get("PROTECTED_CHANNEL_ID"))
URL = os.environ.get("URL")

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è —Å–ø–∞–º–∞
SPAM_PATTERNS = [
    re.compile(r"https?://|www\.|\.(com|ru|org|net|info|bot|me)/?", re.IGNORECASE),
    re.compile(r"(–ø–æ–¥—Ä–∞–±–æ—Ç–∫|–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å|–≤–∞–∫–∞–Ω—Å–∏|—Ä–∞–±–æ—Ç[–∞—ã—É]|—Ä–∞–±–æ—Ç–∞—Ç—å)", re.IGNORECASE),
    re.compile(r"(–ø–∏—à–∏\s*(–≤?\s*(–ª—Å|–ª–∏—á–∫—É|–ª–∏—á–Ω—ã–µ|–ø–º|pm|dm))|–æ–±—Ä–∞—â–∞–π—Å—è|–Ω–∞–ø–∏—à–∏|—Å–≤—è–∂–∏—Å—å)", re.IGNORECASE),
    re.compile(r"(–∏–Ω–≤–µ—Å—Ç|–±–∏–∑–Ω–µ—Å|–ø–∞—Ä—Ç–Ω–µ—Ä|—Ñ—Ä–∞–Ω—à–∏–∑|–∫—Ä–∏–ø—Ç|–±–∏—Ç–∫–æ–∏–Ω)", re.IGNORECASE),
    re.compile(r"(–±—ã—Å—Ç—Ä—ã[–µ–π]? –¥–µ–Ω—å–≥–∏|–ª–µ–≥–∫[–∞–æ–∏]? –∑–∞—Ä–∞–±–æ—Ç–æ–∫|–Ω–∞ –¥–æ–º—É|—É–¥–∞–ª–µ–Ω–Ω|—É–¥–∞–ª—ë–Ω–Ω)", re.IGNORECASE),
    re.compile(r"(–Ω–∞–±–æ—Ä.*(—Å–æ—Ç—Ä—É–¥–Ω–∏–∫|–ø–µ—Ä—Å–æ–Ω–∞–ª|—Ä–∞–±–æ—Ç–Ω–∏–∫)|—Ç—Ä–µ–±—É—é—Ç—Å—è|—Ç—Ä–µ–±—É–µ—Ç—Å—è|–∏—â–µ–º|–¥–ª—è\s+—Ä–∞–±–æ—Ç—ã)", re.IGNORECASE),
    re.compile(r"\+?\d{10,}|@\w{5,}|–∫–æ–Ω—Ç–∞–∫—Ç|—Ç–µ–ª–µ—Ñ–æ–Ω|whatsapp|–≤–∞–π–±–µ—Ä", re.IGNORECASE),
    re.compile(r"(–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–±–æ–Ω—É—Å|–∞–∫—Ü–∏|—Å–∫–∏–¥–∫|–≤—ã–≥–æ–¥–Ω|–ø—Ä–µ–¥–ª–æ–∂–µ–Ω|–º–ª–º|—Å–µ—Ç–µ–≤–æ–π|–º–∞—Ä–∫–µ—Ç–∏–Ω–≥)", re.IGNORECASE),
    re.compile(r"(8000|8\s*000|8–∫|8\s*[–∫k]|–¥–µ–Ω—å–≥–∏|–≤—ã–ø–ª–∞—Ç|–ø–æ–ª—É—á–∞–µ—à—å)", re.IGNORECASE),
    re.compile(r"(–∑–∞\s*4\s*—á–∞—Å|–Ω–µ—Å–∫–æ–ª—å–∫–æ\s*–¥–Ω–µ–π|–Ω—É–∂–Ω—ã\s+–ª—é–¥–∏|–±–µ–∑\s+–≤–ª–æ–∂–µ–Ω–∏–π|–±–µ–∑\s+–æ–ø—ã—Ç–∞)", re.IGNORECASE),
    re.compile(r"(–≤\s+—Å–≤–æ–±–æ–¥–Ω–æ–µ\s+–≤—Ä–µ–º—è|–≤\s+–ª—é–±–æ–µ\s+–≤—Ä–µ–º—è)", re.IGNORECASE),
]

async def check_bot_permissions(app):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ."""
    try:
        bot = app.bot
        member = await bot.get_chat_member(PROTECTED_CHANNEL_ID, bot.id)
        if not member.can_delete_messages:
            logger.error("üö´ –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ %s!", PROTECTED_CHANNEL_ID)
            return False
        logger.info("‚úÖ –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        return True
    except Exception as e:
        logger.error("üö´ –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: %s", e)
        return False

async def check_message(update: Update, context):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º–∞ –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö."""
    message = update.effective_message
    if not message:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if message.from_user.id == OWNER_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    if message.chat_id != PROTECTED_CHANNEL_ID:
        logger.info("üìç –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: %s", message.chat_id)
        return

    text = message.text or ""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º t.me –≤ —Ç–µ–∫—Å—Ç–µ
    if "t.me" in text.lower():
        logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (t.me –≤ —Ç–µ–∫—Å—Ç–µ) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", message.from_user.id)
        await delete_message(message)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    if message.entities:
        for entity in message.entities:
            if entity.type in ["url", "text_link"]:
                logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (—Å—Å—ã–ª–∫–∞) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", message.from_user.id)
                await delete_message(message)
                return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    for pattern in SPAM_PATTERNS:
        if pattern.search(text):
            logger.info("üîç –ù–∞–π–¥–µ–Ω —Å–ø–∞–º (%s) –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç %s", pattern.pattern, message.from_user.id)
            await delete_message(message)
            return

async def delete_message(message):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    try:
        await message.delete()
        logger.info("üóëÔ∏è –£–î–ê–õ–ï–ù–û —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç %s", message.from_user.id)
    except BadRequest as e:
        logger.error("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", e)

def application():
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Application."""
    app = Application.builder().token(TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_message))
    return app

async def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("ü§ñ –ê–Ω—Ç–∏—Å–ø–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìç –¢–æ–∫–µ–Ω: %s...", TOKEN[:10])
    logger.info("üëë ID –≤–ª–∞–¥–µ–ª—å—Ü–∞: [%s]", OWNER_ID)
    logger.info("üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª: %s", PROTECTED_CHANNEL_ID)
    logger.info("üìä –†–µ–∂–∏–º –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω")

    app = application()
    await app.initialize()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
    if not await check_bot_permissions(app):
        logger.error("üõë –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø—Ä–∞–≤")
        await app.shutdown()
        return

    if URL:
        logger.info("üåê –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook: %s", URL)
        await app.start()
        await app.updater.start_webhook(
            listen="0.0.0.0",
            port=int(os.environ.get("PORT", 5000)),
            url_path=TOKEN,
            webhook_url=URL + TOKEN
        )
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π webhook
        await asyncio.sleep(1)
        await app.bot.set_webhook(url=URL + TOKEN)
        try:
            await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è webhook
        finally:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()
    else:
        logger.info("üì° –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling")
        await app.start()
        await app.updater.start_polling(poll_interval=1.0)
        try:
            await asyncio.Event().wait()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –¥–ª—è polling
        finally:
            await app.updater.stop()
            await app.stop()
            await app.shutdown()

if __name__ == "__main__":
    asyncio.run(main())